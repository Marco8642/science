
for i,v in pairs(workspace:GetDescendants()) do
	if v.ClassName == "Model" or v:IsA("BasePart") then
	spawn(function()
	if v:IsA("Model") then
		game.Players.LocalPlayer:RequestStreamAroundAsync(v.WorldPivot.Position,1)
		else
		game.Players.LocalPlayer:RequestStreamAroundAsync(v.Position,1)
		end
		end)
	end
	end
	warn("Anti afk running")
	game:GetService("Players").LocalPlayer.Idled:connect(function()
	warn("Anti afk ran")
	game:GetService("VirtualUser"):CaptureController()
	game:GetService("VirtualUser"):ClickButton2(Vector2.new())
	end)
	getfenv().grav = workspace.Gravity
	local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Marco8642/science/main/ui%20libs2"))()
	local example = library:CreateWindow({
	  text = "Vehicle Legends"
	})
	example:AddBox("Enter Vehicle Speed", function(object, focus)
		if focus then
		getfenv().speed = tonumber(object.Text)
		end
	  end)
	  example:AddToggle("Auto Collect Eggs", function(state)
		getfenv().egggs = (state and true or false)
		while getfenv().egggs do
			task.wait()
		for i,v in pairs(workspace.Eggs:GetDescendants()) do
			if v.Name == "TouchInterest" then
			firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart,v.Parent,0)
			firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart,v.Parent,1)
			task.wait()
			end
			end
		end
	  end)
	  example:AddToggle("Auto Drive", function(state)
		getfenv().drive = (state and true or false)
		spawn(function()
		game.Players.LocalPlayer:RequestStreamAroundAsync(Vector3.new(656.842041, 6.3375659, 2981.96436))
		end)
		wait(1)
		
		local car =game:GetService("Workspace").Vehicles[game.Players.LocalPlayer.Name.."'s Car"]
		car:PivotTo(CFrame.new(Vector3.new(656.842041, 6.3375659, 2981.96436),Vector3.new(592.12439, 6.33634377, 1080.79797)))
			car.PrimaryPart=car.Weight
		wait(1)
		while getfenv().drive do
			task.wait()
            	mathlock = getfenv().speed or 300
	local location = Vector3.new(592.12439, 6.33634377, 1080.79797)
	if getfenv().drive then
	repeat task.wait()
    	mathlock = getfenv().speed or 300
			car.PrimaryPart.AssemblyLinearVelocity = Vector3.new(car.PrimaryPart.AssemblyLinearVelocity.X,-10,car.PrimaryPart.AssemblyLinearVelocity.Z)
			car.PrimaryPart.AssemblyLinearVelocity =car.PrimaryPart.CFrame.LookVector*mathlock
			car.PrimaryPart.AssemblyLinearVelocity = Vector3.new(car.PrimaryPart.AssemblyLinearVelocity.X,-10,car.PrimaryPart.AssemblyLinearVelocity.Z)
			car:PivotTo(CFrame.new(car.PrimaryPart.Position,location))
			car.PrimaryPart.AssemblyLinearVelocity = Vector3.new(car.PrimaryPart.AssemblyLinearVelocity.X,-10,car.PrimaryPart.AssemblyLinearVelocity.Z)
	until game.Players.LocalPlayer:DistanceFromCharacter(location) < 50 or getfenv().drive == false
end
	local location = Vector3.new(656.842041, 6.3375659, 2981.96436)
	if getfenv().drive then
	repeat task.wait()
    	mathlock = getfenv().speed or 300
			car.PrimaryPart.AssemblyLinearVelocity = Vector3.new(car.PrimaryPart.AssemblyLinearVelocity.X,-10,car.PrimaryPart.AssemblyLinearVelocity.Z)
			car.PrimaryPart.AssemblyLinearVelocity =car.PrimaryPart.CFrame.LookVector*mathlock
			car.PrimaryPart.AssemblyLinearVelocity = Vector3.new(car.PrimaryPart.AssemblyLinearVelocity.X,-10,car.PrimaryPart.AssemblyLinearVelocity.Z)
			car:PivotTo(CFrame.new(car.PrimaryPart.Position,location))
			car.PrimaryPart.AssemblyLinearVelocity = Vector3.new(car.PrimaryPart.AssemblyLinearVelocity.X,-10,car.PrimaryPart.AssemblyLinearVelocity.Z)
	until game.Players.LocalPlayer:DistanceFromCharacter(location) < 50 or getfenv().drive == false
end
	end
	  end)
	example:AddToggle("Auto Race", function(state)
	getfenv().test = (state and true or false)
	_G.rat = nil
	getfenv().racename = nil
	local distance = math.huge
	for a,b in pairs(workspace.Races:GetDescendants()) do
		if b.ClassName == "Part" and b.Name == "Queue"  then
	local Dist = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - b.Position).magnitude
	if Dist < distance then
	distance = Dist
	getfenv().racename = b.Parent.Parent.Name
	_G.rat = b
	end
	end
	end
	workspace.Gravity = getfenv().grav
	local queued = _G.rat.CFrame
		local chr = game.Players.LocalPlayer.Character
	local car =game:GetService("Workspace").Vehicles[game.Players.LocalPlayer.Name.."'s Car"]
	car.PrimaryPart=car.Weight
	while getfenv().test do
	task.wait()
	if game:GetService("Players").LocalPlayer.PlayerGui.Races.Timer.Visible == true and game:GetService("Players").LocalPlayer.PlayerGui.Races.WaitingForPlayers.Visible == false and car:GetAttribute("InRace") == true and game:GetService("Players").LocalPlayer.PlayerGui.Races.main.content.Timer.timer.Text ~= "00:00:00" then
	print("ye boi")
    task.wait()
	local checks = #game:GetService("Workspace").RaceProps.Checkpoints:GetChildren()
	local test
    local data = game:GetService("ReplicatedStorage").Event.GetRaceLaps:InvokeServer()
     local laps =data[getfenv().racename]
	for a=1,laps+100 do
	for i=1,checks do
    if game:GetService("Workspace").RaceProps:FindFirstChild("Checkpoints") and game:GetService("Workspace").RaceProps.Checkpoints:FindFirstChild(i) then
 test = game:GetService("Workspace").RaceProps.Checkpoints[i]
	if test == nil then
		test = game:GetService("Workspace").RaceProps.Checkpoints[tostring(i)]
	end
		local speed = getfenv().speed or 300
	local dist = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position-test.Position).magnitude
	local car =game:GetService("Workspace").Vehicles[game.Players.LocalPlayer.Name.."'s Car"]
	local TweenService = game:GetService("TweenService")
	local TweenInfoToUse = TweenInfo.new(dist/speed, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 0, false, 0)
	local TweenValue = Instance.new("CFrameValue")
	TweenValue.Value = car:GetPrimaryPartCFrame()        
	TweenValue.Changed:Connect(function()
	car:PivotTo(TweenValue.Value)
    car.PrimaryPart.Velocity = test.CFrame.LookVector*speed
	car.PrimaryPart.Velocity = Vector3.new(car.PrimaryPart.Velocity.X,0,car.PrimaryPart.Velocity.Z)
	end)            
	getfenv().tween = TweenService:Create(TweenValue, TweenInfoToUse, {Value=test.CFrame})
	getfenv().tween:Play()
	repeat task.wait()
	until car:GetAttribute("InRace") ~= true or  getfenv().tween.PlaybackState == Enum.PlaybackState.Cancelled or getfenv().tween.PlaybackState == Enum.PlaybackState.Completed or getfenv().tween.PlaybackState == Enum.PlaybackState.Paused
	finished = true
    if getfenv().tween ~= nil and getfenv().tween.PlaybackState ~= Enum.PlaybackState.Completed then
		getfenv().tween:Cancel()
    end
end
end
end
local car =game:GetService("Workspace").Vehicles[game.Players.LocalPlayer.Name.."'s Car"]
	elseif game:GetService("Players").LocalPlayer.PlayerGui.Races.Timer.Visible == false and car:GetAttribute("InRace") ~= true and not game:GetService("Workspace").RaceProps:FindFirstChild("Checkpoints") and game.Players.LocalPlayer:DistanceFromCharacter(Vector3.new(queued.X,game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.Y,queued.Z)) > 15 then
		workspace.Gravity = getfenv().grav
		local car =game:GetService("Workspace").Vehicles[game.Players.LocalPlayer.Name.."'s Car"]
		car.PrimaryPart.Velocity = Vector3.new(0,0,0)
	car:PivotTo(queued)
	wait(1)
	end
end
	end)
		local example = library:CreateWindow({
		text = "Race Custom Laps"
	  })
          example:AddLabel("                  Select Race", function(object, focus)
    end)
local function getRaces()
local race = {}
for i,v in pairs(game:GetService("ReplicatedStorage").Storage.RaceStorage:GetChildren()) do
    if v:IsA("Folder") then
     table.insert(race,v.Name)
   end
end
    return race
end
example:AddDropdown(getRaces(),function(state)
    getfenv().selectedrace = state
end)
          example:AddLabel("            Race Laps Changer", function(object, focus)
    end)
	example:AddBox("Enter Race Laps Amount", function(object, focus)
		if focus then
game:GetService("ReplicatedStorage").Event.PrivateServer:InvokeServer("ChangeLaps", getfenv().selectedrace, tonumber(object.Text))
		end
	  end)
      wait(5)
        for i,v in pairs(workspace:GetDescendants()) do
	if v.ClassName == "Model" or v:IsA("BasePart") then
	spawn(function()
	if v:IsA("Model") then
		game.Players.LocalPlayer:RequestStreamAroundAsync(v.WorldPivot.Position,1)
		else
		game.Players.LocalPlayer:RequestStreamAroundAsync(v.Position,1)
		end
		end)
	end
	end
