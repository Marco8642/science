repeat task.wait()
until game:IsLoaded()
    local VIM = game:GetService("VirtualInputManager")
   local GuiService = game:GetService("GuiService")
local interface = game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("Interface")
repeat task.wait()
until interface
   local player = game.Players.LocalPlayer
repeat task.wait()
until interface.MainMenu.Enabled
repeat task.wait()
if nterface.MainMenu.Enabled then
   local button = interface.MainMenu.Menu.MainScreen.Menu.Play
   button.Selectable = true
           GuiService.SelectedObject = button
           VIM:SendKeyEvent(true, Enum.KeyCode.Return, false, player.PlayerGui)
           VIM:SendKeyEvent(false, Enum.KeyCode.Return, false, player.PlayerGui)
wait()
 GuiService.SelectedObject = nil
 end
 until nterface.MainMenu.Enabled == false
print("Done Loading")
for i,v in pairs(workspace:GetDescendants()) do
         if v.ClassName == "ProximityPrompt" and v.Parent.Name == "HumanoidRootPart" and not v.Parent.Parent:GetAttribute("OpenParticlesType") and v.Enabled and v.ActionText == "Open" and getfenv().chests then
            pcall(function()
            local timer = tick()
            repeat task.wait()
         game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Parent.CFrame
         fireproximityprompt(v)
         until v.Enabled == false or getfenv().chests == false or tick()-time > 5
      end)
      end
      end
      queueonteleport(game:HttpGet("https://raw.githubusercontent.com/Marco8642/science/refs/heads/main/fishing%20server%20hop", true))

_G.playercount = 5
local serverfound = nil
    local cursor
    placeId = game.PlaceId
    repeat
        local response = game:GetService("HttpService"):JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100" .. (cursor and "&cursor=" .. cursor or "")))
        for _, v in pairs(response.data) do
           if v.playing < _G.playercount  then
           serverfound = v.id
           print(v.playing)
        end
        end
        cursor = response.nextPageCursor
    until not cursor or serverfound ~= nil
game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, serverfound, game.Players.LocalPlayer)
